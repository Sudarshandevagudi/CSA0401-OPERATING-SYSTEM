#include <stdio.h>
#include <stdbool.h>

#define NUM_PAGE_FRAMES 3
#define NUM_PAGE_REFERENCES 21

int page_reference_sequence[NUM_PAGE_REFERENCES] = {1, 2, 3, 2, 1, 5, 2, 1, 6, 2, 5, 6, 3, 1, 3, 6, 1, 2, 4, 3};
int page_frames[NUM_PAGE_FRAMES];
int page_fault_count = 0;

bool is_page_fault(int page_number) {
for (int i = 0; i < NUM_PAGE_FRAMES; i++) {
if (page_frames[i] == page_number) {
return false;
}
}
return true;
}

void replace_page(int page_number) {
int least_recently_used_index = 0;
for (int i = 0; i < NUM_PAGE_FRAMES; i++) {
int j;
for (j = page_fault_count - 1; j >= 0; j--) {
if (page_reference_sequence[j] == page_frames[i]) {
break;
}
}
if (j < least_recently_used_index) {
least_recently_used_index = i;
}
}
page_frames[least_recently_used_index] = page_number;
}

int main() {
for (int i = 0; i < NUM_PAGE_FRAMES; i++) {
page_frames[i] = -1;
}

for (int i = 0; i < NUM_PAGE_REFERENCES; i++) {
int page_number = page_reference_sequence[i];
if (is_page_fault(page_number)) {
page_fault_count++;
if (page_fault_count <= NUM_PAGE_FRAMES) {
page_frames[page_fault_count - 1] = page_number;
} else {
replace_page(page_number);
}
}
}

printf("Number of page faults: %d\n", page_fault_count);
return 0;
}
