#include<stdio.h>
#include<stdlib.h>
#define MAX 100

struct Process
{
    int pid;
    int arrivalTime;
    int burstTime;
    int remainingTime;
};

int findShortestProcess(struct Process proc[], int n, int currTime)
{
    int shortest = -1, shortestTime = 99999;
    for (int i = 0; i < n; i++)
    {
        if (proc[i].remainingTime > 0 && currTime >= proc[i].arrivalTime)
        {
            if (proc[i].remainingTime < shortestTime)
            {
                shortestTime = proc[i].remainingTime;
                shortest = i;
            }
        }
    }
    return shortest;
}

void SRPT(struct Process proc[], int n)
{
    int currTime = 0, complete = 0, waitTime = 0, turnaroundTime = 0;
    while (complete != n)
    {
        int shortest = findShortestProcess(proc, n, currTime);
        if (shortest == -1)
        {
            currTime++;
            continue;
        }
        proc[shortest].remainingTime--;
        currTime++;
        if (proc[shortest].remainingTime == 0)
        {
            complete++;
            waitTime += currTime - proc[shortest].arrivalTime - proc[shortest].burstTime;
            turnaroundTime += currTime - proc[shortest].arrivalTime;
        }
    }
    printf("Average waiting time = %f\n", (float)waitTime/n);
    printf("Average turn around time = %f\n", (float)turnaroundTime/n);
}

int main()
{
    struct Process proc[] = {{1, 0, 5, 5}, {2, 1, 3, 3}, {3, 2, 3, 3}, {4, 4, 1, 1}};
    int n = sizeof(proc)/sizeof(proc[0]);
    SRPT(proc, n);
    return 0;
}
